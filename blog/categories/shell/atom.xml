<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[catogories：Shell | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2024-09-05T11:43:19+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash中getopts使用备忘]]></title>
    <link href="http://isunix.github.io/blog/2016/07/19/weird-things-happen-when-scripts-executing-with-and-passing-args-with-getopts/"/>
    <updated>2016-07-19T17:43:32+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/19/weird-things-happen-when-scripts-executing-with-and-passing-args-with-getopts</id>
    <content type="html"><![CDATA[<p>I have met the following scripts, say aa.sh</p>

<p>```sh
echo “OPTIND for aa.sh before calling is: “ $OPTIND
while getopts “t:c:” opt
do
    case “$opt” in
        t) time=”${OPTARG}”;;
        c) count=”${OPTARG}”;;
    esac
done</p>

<p>echo “time for aa.sh is $time”
echo “count for aa.sh is $count”
echo “OPTIND for aa.sh after calling is: “ $OPTIND<code>sh
</code>``</p>

<p>and bb.sh</p>

<p>```sh
echo “OPTIND for bb.sh before calling is: “ $OPTIND
echo “we are setting the OPTIND to 1”
while getopts “t:c:” opt
do
    case “$opt” in
        t) time=”${OPTARG}”;;
        c) count=”${OPTARG}”;;
    esac
done</p>

<p>echo “time for bb.sh is $time”
echo “count for bb.sh is $count”</p>

<p>echo “OPTIND for bb.sh after calling is: “ $OPTIND
```</p>

<p>and call.sh</p>

<p><code>sh
. ./aa.sh -t 2016-07-15 -c 4
. ./bb.sh -a 2016-07-20 -c 0
</code></p>

<p>and now execute the script, it will give out the followig result,</p>

<p><code>
OPTIND for aa.sh before calling is:  1
time for aa.sh is 2016-07-15
count for aa.sh is 4
OPTIND for aa.sh after calling is:  5
OPTIND for bb.sh before calling is:  5
=time for bb.sh is 2016-07-15
count for bb.sh is 4
OPTIND for bb.sh after calling is:  5
</code></p>

<p>Which is definitely not what we want.</p>

<p>We can now change bb.sh into the following to test it again.</p>

<p>```sh
echo “OPTIND for bb.sh before calling is: “ $OPTIND</p>

<p>OPTIND=1</p>

<p>echo “we are setting the OPTIND to 1”
while getopts “t:c:” opt
do
    case “$opt” in
        t) time=”${OPTARG}”;;
        c) count=”${OPTARG}”;;
    esac
done</p>

<p>echo “time for bb.sh is $time”
echo “count for bb.sh is $count”</p>

<p>echo “OPTIND for bb.sh after calling is: “ $OPTIND
```</p>

<p>and now “sh call.sh” will give out the following result,</p>

<p><code>
OPTIND for aa.sh before calling is:  1
time for aa.sh is 2016-07-15
count for aa.sh is 4
OPTIND for aa.sh after calling is:  5
OPTIND for bb.sh before calling is:  5
we are setting the OPTIND to 1
time for bb.sh is 2016-07-20
count for bb.sh is 0
OPTIND for bb.sh after calling is:  5
</code></p>

<p>What if we set the OPTIND to 3 now?</p>

<p><code>sh
OPTIND for aa.sh before calling is:  1
time for aa.sh is 2016-07-15
count for aa.sh is 4
OPTIND for aa.sh after calling is:  5
OPTIND for bb.sh before calling is:  5
we are setting the OPTIND to 3
time for bb.sh is 2016-07-15
count for bb.sh is 0
OPTIND for bb.sh after calling is:  5
</code></p>

<p>Now the count value is changed to 0, however time is still not changed.</p>

<p>How to understand this? First let us look at the definitions of $OPTIND and getopts</p>

<p><code>
A getopts construct usually comes packaged in a while loop, which processes the options and
arguments one at a time, then increments the implicit $OPTIND variable to point to the next.
</code></p>

<p>In a while loop contaning getopts, getopts will use $OPTIND to find the arguments. if we call the script using “dot” which is the same as using “source”, $OPTIND will be global and available to the next script using getopts, and the next script will then can not find the right argument using $OPTIND now. </p>

<p>The solution here is, we can reset $OPTIND to 1 or we can call the script using “sh” rather than “.”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么去除windows编辑过的文件中的^M字符]]></title>
    <link href="http://isunix.github.io/blog/2016/07/18/zen-yao-qu-chu-windowsbian-ji-guo-de-wen-jian-zhong-de-mzi-fu/"/>
    <updated>2016-07-18T08:12:34+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/18/zen-yao-qu-chu-windowsbian-ji-guo-de-wen-jian-zhong-de-mzi-fu</id>
    <content type="html"><![CDATA[<p>We can use the following two methods to get rid of the “^M” character in a file which was edited on windows using vim.</p>

<p>1.</p>

<p><code>sh
:%s/\r//g
</code></p>

<p>2.</p>

<p><code>sh
:%s/ctrl-v ctrl-m//g
</code></p>

<p>The second one means pressing ctrl-v, then ctrl-m first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装tmux时error While Loading Shared Libraries: libevent-2.0.so.5问题的解决]]></title>
    <link href="http://isunix.github.io/blog/2016/07/12/tmux-error-while-loading-shared-libraries-libevent-2-dot-0-so-dot-5/"/>
    <updated>2016-07-12T10:34:50+08:00</updated>
    <id>http://isunix.github.io/blog/2016/07/12/tmux-error-while-loading-shared-libraries-libevent-2-dot-0-so-dot-5</id>
    <content type="html"><![CDATA[<p>I have kept a blog on tmux installation which is about missing module libevent, and the post is on:</p>

<p><code>html
http://isunix.github.io/blog/2014/12/24/libevent-not-found-error-while-install-tmux/
</code></p>

<p>Recently even after I install the livevent module, I still get the following errors after installing tmux and then running tmux:</p>

<p><code>
 ./tmux: error while loading shared libraries: libevent-2.0.so.5: cannot open shared object file: No such file or 
</code></p>

<p>I installed the libevent lib in $HOME/local/lib, and tmux says it can not find the library, Weird. With the help of one of my colleague, this problem is solved.</p>

<p><code>sh
export DIR="$HOME/local"
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$DIR/lib
./configure --prefix=$DIR CFLAGS="-I$DIR/include" LDFLAGS="-L$DIR/lib"
make
make install
</code></p>

<p>As we can see, the point here is setting the “LD_LIBRARY_PATH” variable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[按每行长度排序文本行]]></title>
    <link href="http://isunix.github.io/blog/2016/01/20/sort-lines-by-length/"/>
    <updated>2016-01-20T10:14:15+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/20/sort-lines-by-length</id>
    <content type="html"><![CDATA[<p>I have a file containing quite many lines of strings and I want to sort them by line length. Here is how.</p>

<p><code>sh
cat $file | awk '{ print length($0) " " $0; }' | sort -r -n | cut -d ' ' -f 2- | less
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介绍stdin的一个好文章]]></title>
    <link href="http://isunix.github.io/blog/2016/01/05/a-wonderful-post-on-stdin/"/>
    <updated>2016-01-05T14:30:04+08:00</updated>
    <id>http://isunix.github.io/blog/2016/01/05/a-wonderful-post-on-stdin</id>
    <content type="html"><![CDATA[<p>The following is a wonderful post on stdin, stdout, stderr.</p>

<p><code>html
http://www.jstorimer.com/blogs/workingwithcode/7766119-when-to-use-stderr-instead-of-stdout
</code></p>

<p>Notes:</p>

<p>1.[-n string] 将会测试string的长度，如果大于0， 则返回true</p>

<p>2.awesome os-x command line:</p>

<p><code>html
https://github.com/herrbischoff/awesome-osx-command-line
</code></p>
]]></content>
  </entry>
  
</feed>
