<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[catogories：Django&Flask | Steven's Blog]]></title>
  <link href="http://isunix.github.io/blog/categories/django-and-flask/atom.xml" rel="self"/>
  <link href="http://isunix.github.io/"/>
  <updated>2024-08-29T17:54:17+08:00</updated>
  <id>http://isunix.github.io/</id>
  <author>
    <name><![CDATA[Steven Sun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flask中使用ipython的shell]]></title>
    <link href="http://isunix.github.io/blog/2019/05/21/flaskzhong-shi-yong-ipythonde-shell/"/>
    <updated>2019-05-21T19:44:25+08:00</updated>
    <id>http://isunix.github.io/blog/2019/05/21/flaskzhong-shi-yong-ipythonde-shell</id>
    <content type="html"><![CDATA[<p>我们在Flask中使用shell的时候没有语法高亮和代码提示，想要获得一个ipython般的体验，现在有</p>

<ul>
  <li>https://github.com/ei-grad/flask-shell-ipython</li>
</ul>

<p><code>
pip install flask-shell-ipython
</code></p>

<p>装好了之后，执行如下的命令就可以了</p>

<p><code>
flask shell
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gunicorn中css文件没有起作用的问题解决]]></title>
    <link href="http://isunix.github.io/blog/2015/11/19/css-files-not-function-well-while-using-gunicorn/"/>
    <updated>2015-11-19T16:42:04+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/19/css-files-not-function-well-while-using-gunicorn</id>
    <content type="html"><![CDATA[<p>I find that my bootstap files not working well while I am using gunicorn to start the app.</p>

<p><code>sh
gunicorn --env DJANGO_SETTINGS_MODULE=myapp.settings myapp_management.wsgi --timeout 300 --workers=2 --pid gunicorn.pid -b 0:10000 --access-logfile=log/access_charts.log --error-logfile=log/error_charts.log --access-logformat '"%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s %(p)s'
</code></p>

<p>I find a solution for this:</p>

<p><code>html
http://stackoverflow.com/questions/12800862/django-static-files-under-gunicorn
</code></p>

<p>To summarize it here, add the following contents to the urls.py file.</p>

<p>```sh
from django.contrib.staticfiles.urls import staticfiles_urlpatterns</p>

<p>urlpatterns += staticfiles_urlpatterns()
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django Admin中改页面的Header]]></title>
    <link href="http://isunix.github.io/blog/2015/11/18/django-admin-changing-the-page-header/"/>
    <updated>2015-11-18T16:58:31+08:00</updated>
    <id>http://isunix.github.io/blog/2015/11/18/django-admin-changing-the-page-header</id>
    <content type="html"><![CDATA[<p>This post shows how to change the header of the django admin page.</p>

<p>The blog for reference is:</p>

<p><code>html
http://www.mc706.com/tip_trick_snippets/42/django-admin-changing-the-page-header/
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python3中开发Django]]></title>
    <link href="http://isunix.github.io/blog/2015/10/12/django-development-in-python3-environemnt/"/>
    <updated>2015-10-12T14:55:22+08:00</updated>
    <id>http://isunix.github.io/blog/2015/10/12/django-development-in-python3-environemnt</id>
    <content type="html"><![CDATA[<p>What if I want to development a django app in python3 environement.</p>

<p>Using vitualenv</p>

<p>```sh
python3 -m venv sbenv
source sbenv/bin/activate
pip install -r requirements.txt</p>

<p>```</p>

<p>Using virtualenvwrapper</p>

<p><code>sh
which python3   --to get the location of python3 interpreter
mkvirtualenv --python=/usr/local/bin/python3 django_dev
workon django_dev
</code></p>
]]></content>
  </entry>
  
</feed>
